{"ast":null,"code":"import axios from 'axios';\nimport { toast } from 'react-toastify';\nexport const getAllConversations = async () => {\n  try {\n    const {\n      data\n    } = await axios.get('/conversation/get-user-conversations');\n    return data;\n  } catch (error) {\n    console.log(error.response);\n    await toast.error(error.response.data.msg);\n  }\n};\nexport const getAllUsers = async () => {\n  try {\n    const {\n      data\n    } = await axios.get('/users/get-all-users');\n    console.log(data);\n    if (!data.users) return;\n    return data;\n  } catch (error) {\n    console.log(error.response);\n    await toast.error(error.response.data.msg);\n  }\n};\nexport const getMyInfoAsUser = async () => {\n  try {\n    const {\n      data\n    } = await axios.get('/users/get-my-info');\n    return data.user;\n  } catch (error) {\n    console.log(error.response);\n    await toast.error(error.response.data.msg);\n  }\n};\nexport const getConversationById = async id => {\n  try {\n    const {\n      data\n    } = await axios.get(`/conversation/get-conversation-by-id/${id}`);\n    console.log(data);\n    if (!data.conversation) return;\n    return data.conversation;\n  } catch (error) {\n    console.log(error);\n    return toast.error(error.response.data.msg);\n  }\n};\nexport const handleSendMessage = async (msg, conversationId, setInputValue) => {\n  setInputValue(''); // socket.emit('new-msg', msg)\n\n  try {\n    const {\n      data\n    } = await axios.post(`/conversation/add-new-message-to-conversation/${conversationId}`, {\n      text: msg\n    });\n    return data.message;\n  } catch (error) {\n    console.log(error);\n    return toast.error(error.response.data.msg);\n  }\n};\nexport const handleCreateNewConversation = async userId => {\n  try {\n    const {\n      data\n    } = await axios.post(`/conversation/create-new-conversation`, {\n      targetUserId: userId\n    });\n    console.log(data);\n    return data.conversation;\n  } catch (error) {\n    console.log(error);\n    return toast.error(error.response.data.msg);\n  }\n};","map":{"version":3,"sources":["/home/lolo/Escritorio/chatxx/client/src/utils/utils.js"],"names":["axios","toast","getAllConversations","data","get","error","console","log","response","msg","getAllUsers","users","getMyInfoAsUser","user","getConversationById","id","conversation","handleSendMessage","conversationId","setInputValue","post","text","message","handleCreateNewConversation","userId","targetUserId"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { toast } from 'react-toastify'\n\nexport const getAllConversations = async () => {\n    try {\n        const { data } = await axios.get('/conversation/get-user-conversations')\n        return data\n    } catch (error) {\n        console.log(error.response)\n        await toast.error(error.response.data.msg)\n    }\n}\n\nexport const getAllUsers = async () => {\n    try {\n        const { data } = await axios.get('/users/get-all-users')\n        console.log(data)\n        if (!data.users) return\n        return data\n    } catch (error) {\n        console.log(error.response)\n        await toast.error(error.response.data.msg)\n    }\n}\n\nexport const getMyInfoAsUser = async () => {\n    try {\n        const { data } = await axios.get('/users/get-my-info')\n        return data.user\n    } catch (error) {\n        console.log(error.response)\n        await toast.error(error.response.data.msg)\n    }\n}\n\nexport const getConversationById = async (id) => {\n    try {\n        const { data } = await axios.get(`/conversation/get-conversation-by-id/${id}`)\n        console.log(data)\n        if (!data.conversation) return\n        return data.conversation\n    } catch (error) {\n        console.log(error)\n        return toast.error(error.response.data.msg)\n    }\n}\n\n\nexport const handleSendMessage = async (msg, conversationId, setInputValue) => {\n    setInputValue('')\n    // socket.emit('new-msg', msg)\n    try {\n        const { data } = await axios.post(`/conversation/add-new-message-to-conversation/${conversationId}`, { text: msg })\n        return data.message;\n    } catch (error) {\n        console.log(error)\n        return toast.error(error.response.data.msg)\n    }\n}\n\nexport const handleCreateNewConversation = async (userId) => {\n    try {\n        const { data } = await axios.post(`/conversation/create-new-conversation`, { targetUserId: userId })\n        console.log(data)\n        return data.conversation;\n    } catch (error) {\n        console.log(error)\n        return toast.error(error.response.data.msg)\n    }\n}"]},"metadata":{},"sourceType":"module"}